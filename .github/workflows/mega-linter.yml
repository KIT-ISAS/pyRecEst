---
# MegaLinter GitHub Action configuration file
# More info at https://megalinter.io
name: MegaLinter

permissions:
  checks: write
  pull-requests: write
  contents: write

on: # yamllint disable-line rule:truthy
  # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main
  push: # Comment this line to trigger action only on pull-requests (not recommended if you don't pay for GH Actions)
  pull_request:
    branches: [master, main]

env: # Comment env block if you do not want to apply fixes
  # Apply linter fixes configuration
  APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
  APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
  APPLY_FIXES_MODE: pull_request # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: MegaLinter
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push, comment issues & post new PR
      # Remove the ones you do not need
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      # Your existing step for setting the original and new branch names
      - name: Set original branch name
        id: set-branch-name
        env:
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            ORIGINAL_BRANCH_NAME=${{ github.ref }}
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ORIGINAL_BRANCH_NAME="$BRANCH_NAME"
          fi
          ORIGINAL_BRANCH_NAME="${ORIGINAL_BRANCH_NAME#refs/heads/}"  # Strip refs/heads/ prefix if any
          NEW_BRANCH_NAME="${ORIGINAL_BRANCH_NAME}-linter-patched"
          echo "NEW_BRANCH_NAME=${NEW_BRANCH_NAME}" >> "$GITHUB_ENV"
  
      # Checkout the original branch
      - name: Checkout Original Branch
        run: git checkout ${{ env.ORIGINAL_BRANCH_NAME }}
  
      # Duplicate the original branch to a new branch with linting patches
      - name: Create New Lint-Patched Branch
        run: git checkout -b ${{ env.NEW_BRANCH_NAME }}

      - name: Push new branch
        run: git push origin ${{ env.NEW_BRANCH_NAME }}

      - name: Create alpine-wheels folder
        run: mkdir alpine-wheels

      - name: Cache wheel directory
        id: cache-wheels
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/alpine-wheels
          key: ${{ runner.os }}-alpine-wheels-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-alpine-wheels-${{ hashFiles('requirements-dev.txt') }}

      - name: Set up Alpine Linux
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        uses: jirutka/setup-alpine@v1
        with: # cfitsio, py3-pkgconfig, curl-dev, and zlib for healpy
          packages: >
            build-base
            python3-dev
            py3-pip
            gfortran
            fftw-dev
            git
            openblas-dev
            cmake
            geos-dev
            cfitsio
            py3-pkgconfig
            curl-dev
            zlib-dev

      - name: List workspace
        run: ls -l .

      - name: Upgrade pip and install requirements for building
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install meson-python meson ninja wheel build
        shell: alpine.sh {0}

      - name: Remove version settings
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          sed 's/==.*//' requirements-dev.txt > requirements-dev_no_version.txt
        shell: alpine.sh {0}

      - name: Run CMake to find LAPACK
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          echo "find_package(LAPACK)" > CMakeLists.txt
          echo "if(LAPACK_FOUND)" >> CMakeLists.txt
          echo '  message("LAPACK found")' >> CMakeLists.txt
          echo '  message("LAPACK include dirs: ${LAPACK_INCLUDE_DIRS}")' >> CMakeLists.txt
          echo '  message("LAPACK libraries: ${LAPACK_LIBRARIES}")' >> CMakeLists.txt
          echo "else()" >> CMakeLists.txt
          echo '  message(FATAL_ERROR "LAPACK not found")' >> CMakeLists.txt
          echo "endif()" >> CMakeLists.txt
          cmake .
        shell: alpine.sh {0}

      - name: Run pkg-config to find LAPACK
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          pkg-config --libs --cflags lapack || true
        shell: alpine.sh {0}

      - name: Build wheel for pyshtools
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/FlorianPfaff/SHTOOLS.git
          cd SHTOOLS
          git checkout meson
          python -m build
          cd ..
          mv SHTOOLS/dist/*.whl ./alpine-wheels/
          rm -rf SHTOOLS
        shell: alpine.sh {0}

      - name: Install required packages and dependencies
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: python -m pip install --find-links=./alpine-wheels -r requirements-dev_no_version.txt
        shell: alpine.sh {0}

      - name: Print requirements-dev_no_version.txt
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: cat requirements-dev_no_version.txt
        shell: alpine.sh {0}

      - name: Freeze requirements
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: python -m pip freeze > requirements-tmp.txt
        shell: alpine.sh {0}

      - name: Download compatible packages
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          python -m pip download --find-links=./alpine-wheels -r requirements-tmp.txt -d ./alpine-wheels
        shell: alpine.sh {0}

      - name: Build wheels
        if: steps.cache-wheels.outputs.cache-hit != 'true'
        run: |
          cd ./alpine-wheels
          for src in *.tar.gz; do
            python -m pip wheel "$src" --no-deps --wheel-dir=./
            rm "$src"
          done
          cd ..
        shell: alpine.sh {0}

      - name: List available wheels
        run: ls -l ./alpine-wheels

      - name: Clean up temporary files (in case they are generated)
        run: rm -rf myenv CMakeFiles CMakeCache.txt cmake_install.cmake Makefile

      # MegaLinter
      - name: MegaLinter
        id: ml
        # You can override MegaLinter flavor used to have faster performances
        # More info at https://megalinter.io/latest/configuration/#shared-variables
        uses: oxsecurity/megalinter/flavors/python@v7.4.0
        env:
          # All available variables are described in documentation
          # https://megalinter.io/latest/configuration/#shared-variables
          # ADD YOUR CUSTOM ENV VARIABLES HERE OR DEFINE THEM IN A FILE .mega-linter.yml AT THE ROOT OF YOUR REPOSITORY
          VALIDATE_ALL_CODEBASE: true #  ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }} # Validates all source when push on main, else just the git diff with main. Override with true if you always want to lint all sources
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EMAIL_REPORTER_SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      # Upload MegaLinter artifacts
      - name: Archive production artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      # Create Pull Request
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          title: "[MegaLinter] Apply linters automatic fixes"
          branch: ${{ env.NEW_BRANCH_NAME }}
          base: main
          labels: bot

      # Output PR details
      - name: Create PR output
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # Push new commit if applicable (for now works only on PR from same repository, not from forks)
      - name: Prepare commit
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: sudo chown -Rc $UID .git/
      - name: Commit and push applied linter fixes
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[MegaLinter] Apply linters fixes"
          commit_user_name: megalinter-bot
          commit_user_email: megalinter-bot@iar.kit.edu